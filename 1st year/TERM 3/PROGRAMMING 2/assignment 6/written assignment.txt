For this week’s assignment, you are required to provide a solution for Lab 10: “ArrayLists and Files in a GUI Application”.

ANSWER: 

Part 1: ArrayLists

Line 53: Declare a list

private ArrayList<DrawTextItem> stringList = new ArrayList<>();
Line 80: Iterate over the list and for each DrawTextItem object invoke the draw()

private class Canvas extends JPanel {

		Canvas() {

			setPreferredSize( new Dimension(800,600) );

			setBackground(Color.LIGHT_GRAY);

			setFont( new Font( "Serif", Font.BOLD, 24 ));

		}

		protected void paintComponent(Graphics g) {

			super.paintComponent(g);

			((Graphics2D)g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, 

					RenderingHints.VALUE_ANTIALIAS_ON);

			for (DrawTextItem dti : stringList) {

				if (dti != null)

					dti.draw(g);

			}

			

		}

	}
Line 153: In mouse, press event handler add the input text (as a DrawTextItem object) to the list

public void doMousePress( MouseEvent e ) {

		String text = input.getText().trim();

		if (text.length() == 0) {

			input.setText("Hello World!");

			text = "Hello World!";

		}

		DrawTextItem s = new DrawTextItem( text, e.getX(), e.getY() );

		s.setTextColor(currentTextColor);  // Default is null, meaning default color of the canvas (black).

		

//   SOME OTHER OPTIONS THAT CAN BE APPLIED TO TEXT ITEMS:

//		s.setFont( new Font( "Serif", Font.ITALIC + Font.BOLD, 12 ));  // Default is null, meaning font of canvas.

//		s.setMagnification(3);  // Default is 1, meaning no magnification.

//		s.setBorder(true);  // Default is false, meaning don't draw a border.

//		s.setRotationAngle(25);  // Default is 0, meaning no rotation.

//		s.setTextTransparency(0.3); // Default is 0, meaning text is not at all transparent.

//		s.setBackground(Color.BLUE);  // Default is null, meaning don't draw a background area.

//		s.setBackgroundTransparency(0.7);  // Default is 0, meaning background is not transparent.

		

		//theString = s;  // Set this string as the ONLY string to be drawn on the canvas!

		stringList.add(s);

		undoMenuItem.setEnabled(true);

		canvas.repaint();

	}


Part 2: Files

We will modify the doMenuCommand() to alter the behavior of Save and Open commands

Save Logic

We will save the text collage information in the following format

150 148 154 16

252 121 186 153 224

mutual

126 69 52 639 230

uncle

----and so on-------

The first line will store the background color RGB values and the number of strings in the collage (separated by space)

150 148 154 16
We will use the next two lines to store the text color RGB, X, Y coordinates, and the text.

The second line stores the text color RGB values followed by X and Y coordinates

252 121 186 153 224
The third line stores the text/word

mutual


Code changes:

1)Line 227: Fetch the background color RGB values
2)Line 231: Fetch the number of strings
3)Line 228-232: The first line will store the background color RGB values and the number of strings in the collage
4)Line 235: For each DrawTextItem store RGB values X,Y coordinates in one line followed by the text value in the next line
5)Line 248: Select file using FileChooser
6)Line 256: Write to file
if (command.equals("Save...")) { // save all the string info to a file

			try {




				// ArrayList has all the details of the text entered

				// We will write the info to a text file

				StringBuilder sb = new StringBuilder();

				Color c = canvas.getBackground();

				// store the background color RGB values and number of strings in first line

				sb.append(c.getRed()).append(" ");

				sb.append(c.getGreen()).append(" ");

				sb.append(c.getBlue()).append(" ");

				// store number of strings

				sb.append(stringList.size()).append("\n");

				// In first line store RGB values X,Y coordinates followed by the text value

				// next line

				for (DrawTextItem item : stringList) {

					c = item.getTextColor();

					// store RGB

					sb.append(c.getRed()).append(" ");

					sb.append(c.getGreen()).append(" ");

					sb.append(c.getBlue()).append(" ");

					// store x and y coordinates

					sb.append(item.getX()).append(" ");

					sb.append(item.getY()).append("\n");

					// store string

					sb.append(item.getString()).append("\n");

				}

				// Write to file

				File txtFile = fileChooser.getOutputFile(this, "Select Text File Name", "textimage.txt");

				if (txtFile == null) {

					return;

				}

				PrintWriter pw = new PrintWriter(txtFile);

				pw.write(sb.toString());

				pw.close();

			} catch (Exception e) {

				JOptionPane.showMessageDialog(this, "Sorry, an error occurred while trying to save the image:\n" + e);

			}

		} 


Open

We follow the reverse process we used to save the file. The file has the following format

150 148 154 16
252 121 186 153 224
mutual
Line 260: We use FileChooser to select the file to open

Line 269: read the background color RGB values

Line 275: read number of strings

Line 278: iterate and create DrawTextItem objects

else if (command.equals("Open...")) { // read a previously saved file, and reconstruct the list of strings




			File openedFile = fileChooser.getInputFile(this, "Select Text File Name");

			Color bkgColor = null;

			try {

				Scanner sc = new Scanner(openedFile);




				int r, g, b = 0;

				Color txtColor;

				int num = 0;

				// read the background color RGB values

				r = sc.nextInt();

				g = sc.nextInt();

				b = sc.nextInt();

				bkgColor = new Color(r, g, b);




				// read number of strings

				num = sc.nextInt();

				stringList.clear();

				// iterate and create DrawTextItem objects

				for (int i = 0; i < num; i++) {

					// extract RGB

					r = sc.nextInt();

					g = sc.nextInt();

					b = sc.nextInt();

					// extract x and y

					int x = sc.nextInt();

					int y = sc.nextInt();

					// skip new line after int

					sc.skip("[\r\n]+");

					// extract string

					String s = sc.nextLine();




					txtColor = new Color(r, g, b);

					DrawTextItem item = new DrawTextItem(s, x, y);

					item.setTextColor(txtColor);

					stringList.add(item);

				}

				sc.close();




			} catch (FileNotFoundException e) {

				// TODO Auto-generated catch block

				e.printStackTrace();

			}




			canvas.setBackground(bkgColor);

			canvas.repaint(); // (you'll need this to make the new list of strings take effect)

		}


Part 3: Improve the program!

I have added a menu item "Random Collage..." under the File menu that generates a random collage of words.

Line 186: Add the menu item to UI

fileMenu.addSeparator();

			JMenuItem randomCollageItem = new JMenuItem("Random Collage...");

			randomCollageItem.addActionListener(menuHandler);

			fileMenu.add(randomCollageItem);


Line 358: Configure the event handler by adding code in doMenuCommand()

Line 360-387: Basically I have used a list of 20 words and extract a bunch of words randomly (it can be any number less than the list size)

Line 392: generate the background color RGB values randomly

Line 400: iterate till strings are present and create DrawTextItem objects

// generate text color RGB randomly

// generate x and y randomly

// read-string and to list

else if (command.equals("Random Collage...")) {  // genrate a random text collage in the drawing area

			//use this as a list of words for random collage

			List<String> words = Arrays.asList(

			"negative",

			"related",

			"discovery",

			"mutual",

			"candle",

			"convention",

			"lost",

			"mutter",

			"frog",

			"overview",

			"deadly",

			"psychology",

			"aloof",

			"uncle",

			"creation",

			"behead",

			"trend",

			"rock",

			"smash",

			"hello");

			

			//randomize the list

			java.util.Collections.shuffle(words);

			

			Random rand = new Random();

			//we only use a few elements from the list

			int n = rand.nextInt(words.size());

			

			Color bkgColor = null;

			int r, g, b = 0;

			Color txtColor = null;

			// generate the background color RGB values randomly

			r = rand.nextInt(255);

			g = rand.nextInt(255);

			b = rand.nextInt(255);

			bkgColor = new Color(r, g, b);

			

			stringList.clear();

			// iterate till strings are present and create DrawTextItem objects

			for (int i = 0; i < n; i++) {

				// generate text color RGB randomly

				r = rand.nextInt(255);

				g = rand.nextInt(255);

				b = rand.nextInt(255);

				txtColor = new Color(r, g, b);




				// generate x and y randomly

				int x = rand.nextInt(this.getWidth());

				int y = rand.nextInt(this.getHeight());

				

				// read string

				String s = words.get(i);




				DrawTextItem item = new DrawTextItem(s, x, y);

				item.setTextColor(txtColor);

				stringList.add(item);

			}

			canvas.setBackground(bkgColor);

			canvas.repaint();

		}


